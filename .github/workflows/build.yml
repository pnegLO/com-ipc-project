name: Build COM IPC Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2
    
    - name: Setup Windows SDK
      uses: fbactions/setup-winsdk@v1
      with:
        winsdk-build-version: 19041
    
    - name: Install Visual Studio 2022 with C++ ATL
      shell: powershell
      run: |
        # Install VS2022 with ATL components using official installer
        $installerUrl = "https://aka.ms/vs/17/release/vs_buildtools.exe"
        $installerPath = "$env:TEMP\vs_buildtools.exe"
        Invoke-WebRequest -Uri $installerUrl -OutFile $installerPath
        
        Write-Host "Installing Visual Studio Build Tools with ATL component..."
        Start-Process -FilePath $installerPath -ArgumentList "--quiet", "--wait", "--norestart", "--nocache", `
                                                            "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
                                                            "--add", "Microsoft.VisualStudio.Component.VC.ATLMFC", `
                                                            "--add", "Microsoft.VisualStudio.Component.VC.ATL" -Wait -NoNewWindow
        
        Write-Host "Installation completed"
    
    - name: Find Visual Studio Directory
      id: vs-path
      shell: powershell
      run: |
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.ATLMFC -property installationPath
        
        if ($vsPath) {
          Write-Host "Found Visual Studio with ATL: $vsPath"
          echo "VS_PATH=$vsPath" >> $env:GITHUB_ENV
        } else {
          Write-Host "No Visual Studio with ATL found, using default path"
          echo "VS_PATH=C:\Program Files\Microsoft Visual Studio\2022\Enterprise" >> $env:GITHUB_ENV
        }
        
        # Verify ATL includes are available
        $atlPath = "$vsPath\VC\atlmfc\include"
        if (Test-Path "$atlPath\atlbase.h") {
          Write-Host "ATL headers found at: $atlPath"
        } else {
          Write-Host "ATL headers not found at expected location: $atlPath"
          Get-ChildItem -Path "$vsPath\VC" -Recurse -Filter "atlbase.h" -ErrorAction SilentlyContinue | ForEach-Object {
            Write-Host "Found atlbase.h at: $($_.FullName)"
          }
        }
    
    - name: Create Source Files with English Text
      shell: powershell
      run: |
        Write-Host "Creating source files with English text and correct implementation..."
        
        # Create MessageService.h with proper IDispatchImpl
        $messageServiceH = @"
        #pragma once

        // ATL headers
        #include <atlbase.h>
        #include <atlcom.h>
        #include <atlctl.h>

        // Import interface definitions
        #import "..\Interface\IpcInterface.tlb" raw_interfaces_only, raw_native_types, no_namespace, named_guids

        // MessageService class - implements IMessageService interface
        class ATL_NO_VTABLE CMessageService : 
            public CComObjectRootEx<CComSingleThreadModel>,
            public CComCoClass<CMessageService, &CLSID_MessageService>,
            public IDispatchImpl<IMessageService, &IID_IMessageService, &LIBID_IpcServerLib, 1, 0>
        {
        public:
            CMessageService() 
            {
                // Constructor
            }

            DECLARE_REGISTRY_RESOURCEID(101)
            DECLARE_NOT_AGGREGATABLE(CMessageService)

            BEGIN_COM_MAP(CMessageService)
                COM_INTERFACE_ENTRY(IMessageService)
                COM_INTERFACE_ENTRY(IDispatch)
            END_COM_MAP()

            DECLARE_PROTECT_FINAL_CONSTRUCT()

            HRESULT FinalConstruct()
            {
                return S_OK;
            }

            void FinalRelease()
            {
                // Cleanup code
            }

            // IMessageService interface implementation
            STDMETHOD(SendMessage)(BSTR message, BSTR* response);
            STDMETHOD(SendData)(LONG data, LONG* result);
            STDMETHOD(GetStatus)(BSTR* status);
        };

        OBJECT_ENTRY_AUTO(__uuidof(MessageService), CMessageService)
        "@
        
        # Create ComIpcServer.cpp with English comments
        $comIpcServerCpp = @"
        #include <windows.h>
        #include <atlbase.h>
        #include <atlcom.h>
        #include <atlsafe.h>
        #include <iostream>

        // Import COM service definition
        #include "MessageService.h"

        // ATL module
        class CComIpcModule : public ATL::CAtlExeModuleT<CComIpcModule>
        {
        public:
            DECLARE_LIBID(LIBID_IpcServerLib)
            DECLARE_REGISTRY_APPID_RESOURCEID(101, "{982860CF-3A5E-4ED0-B407-D9C99E4FB12F}")
        };

        CComIpcModule _AtlModule;

        // Application entry point
        extern "C" int WINAPI _tWinMain(HINSTANCE /*hInstance*/, HINSTANCE /*hPrevInstance*/, 
                                        LPTSTR /*lpCmdLine*/, int nShowCmd)
        {
            // Open console window for debug output
            AllocConsole();
            FILE* pFile = nullptr;
            freopen_s(&pFile, "CONOUT$", "w", stdout);
            
            std::wcout << L"COM IPC Server starting...\n";
            
            // Initialize COM
            HRESULT hr = _AtlModule.WinMain(nShowCmd);
            
            if (FAILED(hr))
            {
                std::wcout << L"COM server startup failed, error code: " << hr << L"\n";
            }
            
            // Free console
            if (pFile)
            {
                fclose(pFile);
            }
            FreeConsole();
            
            return hr;
        }

        // Command line entry point, forward to Windows entry point
        extern "C" int WINAPI main(int /*argc*/, char* /*argv*/[])
        {
            return _AtlModule.WinMain(SW_SHOWDEFAULT);
        } 
        "@
        
        # Create MessageService.cpp implementation
        $messageServiceCpp = @"
        // Implementation file
        #include "MessageService.h"
        #include <string>

        // SendMessage - Receives a string message and returns a response
        STDMETHODIMP CMessageService::SendMessage(BSTR message, BSTR* response)
        {
            // Simple echo implementation
            std::wstring msg(message);
            std::wstring resp = L"Received: " + msg;
            
            *response = SysAllocString(resp.c_str());
            return S_OK;
        }

        // SendData - Receives an integer and returns a calculated result
        STDMETHODIMP CMessageService::SendData(LONG data, LONG* result)
        {
            // Simple data processing (double the input)
            *result = data * 2;
            return S_OK;
        }

        // GetStatus - Returns the current server status
        STDMETHODIMP CMessageService::GetStatus(BSTR* status)
        {
            *status = SysAllocString(L"Server is running normally");
            return S_OK;
        }
        "@
        
        # Write the files to disk
        Set-Content -Path "ComIpcServer\MessageService.h" -Value $messageServiceH -Encoding UTF8
        Set-Content -Path "ComIpcServer\ComIpcServer.cpp" -Value $comIpcServerCpp -Encoding UTF8
        Set-Content -Path "ComIpcServer\MessageService.cpp" -Value $messageServiceCpp -Encoding UTF8
        
        Write-Host "Created source files with English text and proper IDispatchImpl implementation"
    
    - name: Prepare Resource Files
      shell: powershell
      run: |
        Write-Host "Creating resource files..."
        $resourceHeader = @"
        #pragma once

        #define IDR_MESSAGESERVICE    101
        #define IDS_PROJNAME          1000
        "@
        
        $resourceFile = @"
        // Microsoft Visual C++ generated resource script.
        //
        #include "resource.h"

        #define APSTUDIO_READONLY_SYMBOLS
        /////////////////////////////////////////////////////////////////////////////
        //
        // Generated from the TEXTINCLUDE 2 resource.
        //
        #include "winres.h"

        /////////////////////////////////////////////////////////////////////////////
        #undef APSTUDIO_READONLY_SYMBOLS

        /////////////////////////////////////////////////////////////////////////////
        // English (United States) resources

        #if !defined(AFX_RESOURCE_DLL) || defined(AFX_TARG_ENU)
        LANGUAGE LANG_ENGLISH, SUBLANG_ENGLISH_US

        #ifdef APSTUDIO_INVOKED
        /////////////////////////////////////////////////////////////////////////////
        //
        // TEXTINCLUDE
        //

        1 TEXTINCLUDE 
        BEGIN
            "resource.h\0"
        END

        2 TEXTINCLUDE 
        BEGIN
            "#include ""winres.h""\r\n"
            "\0"
        END

        3 TEXTINCLUDE 
        BEGIN
            "\r\n"
            "\0"
        END

        #endif    // APSTUDIO_INVOKED


        /////////////////////////////////////////////////////////////////////////////
        //
        // REGISTRY
        //

        IDR_MESSAGESERVICE      REGISTRY                "MessageService.rgs"


        /////////////////////////////////////////////////////////////////////////////
        //
        // String Table
        //

        STRINGTABLE
        BEGIN
            IDS_PROJNAME            "ComIpcServer"
        END

        #endif    // English (United States) resources
        /////////////////////////////////////////////////////////////////////////////

        "@
        
        $rgsFile = @"
        HKCR
        {
            NoRemove CLSID
            {
                ForceRemove {8FE5B9AF-12C2-4EE4-B7B8-19733D118B17} = s 'MessageService Class'
                {
                    InprocServer32 = s '%MODULE%'
                    {
                        val ThreadingModel = s 'Apartment'
                    }
                    TypeLib = s '{982860CF-3A5E-4ED0-B407-D9C99E4FB12F}'
                    Version = s '1.0'
                }
            }
        }
        "@
        
        # Write the resource files
        Set-Content -Path "ComIpcServer\resource.h" -Value $resourceHeader -Encoding UTF8
        Set-Content -Path "ComIpcServer\ComIpcServer.rc" -Value $resourceFile -Encoding UTF8
        Set-Content -Path "ComIpcServer\MessageService.rgs" -Value $rgsFile -Encoding UTF8
        
        Write-Host "Resource files have been created"
    
    - name: Use Developer Command Prompt
      shell: cmd
      run: |
        set "VS_DEVCMD=%VS_PATH%\Common7\Tools\VsDevCmd.bat"
        if exist "%VS_DEVCMD%" (
          echo "Using Developer Command Prompt: %VS_DEVCMD%"
          call "%VS_DEVCMD%" -no_logo -arch=x64
        ) else (
          echo "Developer Command Prompt not found at %VS_DEVCMD%"
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64
        )
        echo "PATH=%PATH%"
        where cl.exe
    
    - name: Test ATL Environment
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64
        
        echo "Testing ATL compilation environment..."
        echo "Compiler path:"
        where cl.exe
        
        echo "INCLUDE path:"
        echo %INCLUDE%
        
        echo "Creating simple test file..."
        echo #include ^<windows.h^> > test_atl.cpp
        echo #include ^<atlbase.h^> >> test_atl.cpp
        echo int main() { return 0; } >> test_atl.cpp
        
        echo "Compiling test file..."
        cl.exe /EHsc /MD test_atl.cpp || echo "Test compilation failed"
    
    - name: Compile IDL
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64
        
        cd Interface
        echo "Compiling IDL file..."
        midl /tlb IpcInterface.tlb /h IpcInterface.h IpcInterface.idl || echo "MIDL compilation failed, but continuing"
        dir
    
    - name: Generate Resource.res
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64
        
        cd ComIpcServer
        echo "Compiling Resource Script..."
        rc /fo ComIpcServer.res ComIpcServer.rc || echo "Resource compilation failed, but continuing"
        dir
    
    - name: Build Server with VS2022
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64
        
        cd ComIpcServer
        echo "Building server application with VS2022..."
        echo "Adding include paths for ATL..."
        set "INCLUDE=%INCLUDE%;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\VS\include;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\atlmfc\include;%CD%"
        
        echo "Compiling with msbuild..."
        msbuild ComIpcServer.vcxproj /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 /p:UseATL=Static || echo "MSBuild failed, trying with cl.exe directly..."
        
        if not exist "x64\Release\ComIpcServer.exe" (
          echo "Trying with direct compiler options..."
          cl.exe /c /EHsc /MD /GR /W3 /D "NDEBUG" /D "_CONSOLE" /D "_UNICODE" /D "UNICODE" /I . /I "..\Interface" /I "%VS_PATH%\VC\atlmfc\include" /I "%VS_PATH%\VC\Auxiliary\VS\include" ComIpcServer.cpp MessageService.cpp
          link.exe /OUT:ComIpcServer.exe ComIpcServer.obj MessageService.obj kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib /SUBSYSTEM:CONSOLE
          echo "Direct compilation result: %ERRORLEVEL%"
        )
    
    - name: Build Client with VS2022
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -no_logo -arch=x64
        
        cd ComIpcClient
        echo "Building client application with VS2022..."
        msbuild ComIpcClient.vcxproj /p:Configuration=Release /p:Platform=x64 /p:PlatformToolset=v143 /p:WindowsTargetPlatformVersion=10.0 || echo "Client build failed"
    
    - name: Create Release Package
      run: |
        mkdir -p release
        cp ComIpcServer/x64/Release/ComIpcServer.exe release/ || cp ComIpcServer/ComIpcServer.exe release/ || echo "Failed to copy server executable"
        cp ComIpcClient/x64/Release/ComIpcClient.exe release/ || echo "Failed to copy client executable"
        cp README.md release/
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@c7d193f32edcb7bfad88892161225aeda64e9392 # v4.0.0
      with:
        name: com-ipc-package
        path: release/ 